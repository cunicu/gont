// SPDX-FileCopyrightText: 2023 Steffen Vogel <post@steffenvogel.de>
// SPDX-License-Identifier: Apache-2.0

package gont

import (
	"bufio"
	"fmt"
	"io"
	"net"
	"os"
	"path/filepath"
	"slices"
	"strings"

	"cunicu.li/gont/v2/internal/utils"
)

// IPv4loopback is the IPv4 loopback address (127.0.0.1)
var IPv4loopback = net.IPv4(127, 0, 0, 1) //nolint:gochecknoglobals

// GenerateHostsFile writes the addresses and host names of all nodes
// into a file located at /run/gont/<network>/files/etc/hosts
//
// Processes started via BaseNode.Run or BaseNode.Start, will see
// this file bind mounted at /etc/hosts
func (n *Network) GenerateHostsFile() error {
	n.hostsFileLock.Lock()
	defer n.hostsFileLock.Unlock()

	fn := filepath.Join(n.VarPath, "files", "etc", "hosts")
	if err := os.MkdirAll(filepath.Dir(fn), 0o755); err != nil {
		return err
	}

	f, err := os.OpenFile(fn, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0o644)
	if err != nil {
		return err
	}
	defer f.Close()

	return n.WriteHostsFile(f)
}

func (n *Network) WriteHostsFile(f io.Writer) error {
	if _, err := fmt.Fprintln(f, "# Autogenerated hosts file by Gont"); err != nil {
		return err
	}

	hosts := map[string][]string{}

	// Loopback addresses
	hosts[IPv4loopback.String()] = []string{"localhost", "localhost.localdomain", "localhost4", "localhost4.localdomain4"}
	hosts[net.IPv6loopback.String()] = []string{"localhost", "localhost.localdomain", "localhost6", "localhost6.localdomain6"}

	add := func(name string, ip net.IP) {
		addr := ip.String()
		if hosts[addr] == nil {
			hosts[addr] = []string{}
		}

		found := false
		for _, n := range hosts[addr] {
			if n == name {
				found = true
			}
		}

		if !found {
			hosts[addr] = append(hosts[addr], name)
		}
	}

	n.ForEachHost(func(n *Host) {
		for _, i := range n.Interfaces {
			if i.IsLoopback() {
				continue
			}

			for _, a := range i.Addresses {
				add(n.Name(), a.IP)
				add(n.Name()+"-"+i.Name, a.IP)
			}
		}
	})

	for addr, names := range hosts {
		if _, err := fmt.Fprintf(f, "%s %s\n", addr, strings.Join(names, " ")); err != nil {
			return err
		}
	}

	return nil
}

func (n *Network) GenerateConfigFiles() error {
	if err := n.generateIProute2Files(); err != nil {
		return err
	}

	// We need to patch /etc/nsswitch.conf here
	// to avoid using systemd-resolved here as its
	// broken from within network namesapces
	if err := n.patchNSSConfFile(); err != nil {
		return err
	}

	// We also need to hide the NSCD socket as glibc
	// will otherwise use NSCD and hence again the resolve
	// NSS module provided by systemd-resolved.
	if err := n.hideNSCDSocket(); err != nil {
		return err
	}

	return nil
}

func (n *Network) hideNSCDSocket() error {
	fn := filepath.Join(n.VarPath, "files/var/run/nscd/socket")

	// We hide the NSCD socket here by bind mounting
	// an empty file over its location.
	return utils.Touch(fn)
}

func readNSSwitchConfig(fn string) (map[string][]string, error) {
	f, err := os.Open(fn)
	if err != nil {
		return nil, err
	}

	m := map[string][]string{}
	s := bufio.NewScanner(f)

	for s.Scan() {
		line := s.Text()

		if strings.HasPrefix(line, "#") {
			continue // Skip comments
		}

		cols := strings.Split(line, ":")

		db := cols[0]
		srcs := cols[1:]

		m[db] = srcs
	}

	if err := s.Err(); err != nil {
		return nil, err
	}

	return nil, nil
}

func writeNSSwitchConfig(fn string, config map[string][]string) error {
	f, err := os.OpenFile(fn, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0o644)
	if err != nil {
		return err
	}
	defer f.Close()

	if _, err = fmt.Fprintln(f, "# Gont's patched nsswitch.conf"); err != nil {
		return err
	}

	for db, srcs := range config {
		if _, err := fmt.Fprintf(f, "%s: %s\n", db, strings.Join(srcs, " ")); err != nil {
			return err
		}
	}

	return err
}

func (n *Network) patchNSSConfFile() error {
	cfg, err := readNSSwitchConfig("/etc/nsswitch.conf")
	if err != nil {
		return fmt.Errorf("failed to read nsswitch.conf: %w", err)
	}

	for db := range cfg {
		if db == "hosts" {
			cfg[db] = slices.DeleteFunc(cfg[db], func(src string) bool {
				return !strings.HasPrefix(src, "resolve") && !strings.HasPrefix(src, "mymachines") && !strings.HasPrefix(src, "myhostname")
			})
		}
	}

	fn := filepath.Join(n.VarPath, "files/etc/nsswitch.conf")
	return writeNSSwitchConfig(fn, cfg)
}

func (n *Network) generateIProute2Files() error {
	fn := filepath.Join(n.VarPath, "files/etc/iproute2/group")
	if err := os.MkdirAll(filepath.Dir(fn), 0o755); err != nil {
		return err
	}

	f, err := os.OpenFile(fn, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0o644)
	if err != nil {
		return err
	}
	defer f.Close()

	if contentsOrig, err := os.ReadFile("/etc/iproute2/group"); err == nil {
		if _, err := f.Write(contentsOrig); err != nil {
			return err
		}
		if _, err := f.WriteString("\n"); err != nil {
			return err
		}
	}

	groups := map[DeviceGroup]string{
		DeviceGroupNorthBound: "north-bound",
		DeviceGroupSouthBound: "south-bound",
	}

	for group, name := range groups {
		fmt.Fprintf(f, "%d %s\n", group, name)
	}

	return nil
}
