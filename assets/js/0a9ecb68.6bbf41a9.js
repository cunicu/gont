"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1049],{7867:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>g,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var a=t(4848),r=t(8453);const c={sidebar_position:6},s="Tracing",i={id:"examples/tracing",title:"Tracing",description:"User defined events, Log messages",source:"@site/docs/examples/tracing.md",sourceDirName:"examples",slug:"/examples/tracing",permalink:"/examples/tracing",draft:!1,unlisted:!1,editUrl:"https://github.com/cunicu/gont/tree/main/docs/website/docs/examples/tracing.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docsSidebar",previous:{title:"CGroups",permalink:"/examples/cgroups"},next:{title:"Debugging",permalink:"/examples/debugging"}},o={},l=[{value:"A trace event",id:"a-trace-event",level:2},{value:"Sink trace events into",id:"sink-trace-events-into",level:3},{value:"Create a tracer",id:"create-a-tracer",level:2},{value:"Attach the tracer",id:"attach-the-tracer",level:2},{value:"Trace with the <code>trace</code> package",id:"trace-with-the-trace-package",level:2},{value:"Trace via <code>slog</code> structured logging package",id:"trace-via-slog-structured-logging-package",level:2},{value:"Trace via <code>go.uber.org/zap</code> logging package",id:"trace-via-gouberorgzap-logging-package",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"tracing",children:"Tracing"})}),"\n",(0,a.jsx)(n.p,{children:"User defined events, Log messages"}),"\n",(0,a.jsx)(n.h2,{id:"a-trace-event",children:"A trace event"}),"\n",(0,a.jsx)(n.p,{children:"Gont supports collecting trace events from all processes running in a\ndistributed system which can carry the following information. Gont\norders trace events by time and saves them to different destinations for\nanalysis."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type Event struct {\n  Timestamp time.Time // Timestamp when the event occurred\n  Type      string    // Either: 'log', \u0301'trace', 'break' & \u0301 watchpoint'\n  Level     uint8     // Log level\n  Message   string    // A human readable description\n  Source    string    // Logger name\n  PID       int \n  Function  string\n  File      string\n  Line      int\n  Args      []any\n  Data      any       // User defined data\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"sink-trace-events-into",children:"Sink trace events into"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"JSON files"}),"\n",(0,a.jsx)(n.li,{children:"Go channels"}),"\n",(0,a.jsx)(n.li,{children:"Go callbacks"}),"\n",(0,a.jsx)(n.li,{children:"Packet captures"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"create-a-tracer",children:"Create a tracer"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'import "cunicu.li/gont/v2/trace"\nimport topt "github.com/cunicu/gont/v2/options/trace"\n\nc := gont.NewCapture(...)\nf, _ := os.OpenFile(...)\nch := make(chan trace.Event)\n\nt := gont.NewTracer(\n  topt.ToFile(f)\n  topt.ToFilename("trace.log"),\n  topt.ToChannel(ch),\n  topt.ToCapture(c),\n  topt.Callback(func(e trace.Event) { ... }))\n\nt.Start()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"attach-the-tracer",children:"Attach the tracer"}),"\n",(0,a.jsx)(n.p,{children:"Trace all processes started by nodes of this network"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'network, _ := gont.NewNetwork("", t)\n'})}),"\n",(0,a.jsx)(n.p,{children:"Trace all processes started by a node"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'host1 := network.NewHost("host1", t)\n'})}),"\n",(0,a.jsx)(n.p,{children:"Trace a single process"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'host1.RunGo("test/main.go", t)\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"trace-with-the-trace-package",children:["Trace with the ",(0,a.jsx)(n.code,{children:"trace"})," package"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'import "cunicu.li/gont/v2/pkg/trace"\n\nsomeData := map[string]string{"Hello": "World"}\ncount := 42\n\ntrace.Start(0)\n\ntrace.PrintfWithData(someData, "Count is: %d", count)\ntrace.Print("Another message")\n\ntrace.Stop()\n'})}),"\n",(0,a.jsx)(n.p,{children:"Works from:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Gont process itself"}),"\n",(0,a.jsxs)(n.li,{children:["Any process spawned via Gont's\n",(0,a.jsx)(n.code,{children:"Host.{Command,Run,RunGo,Start,StartGo}(...)"})," functions"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"trace-via-slog-structured-logging-package",children:["Trace via ",(0,a.jsx)(n.code,{children:"slog"})," structured logging package"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'import "log/slog"\nimport "cunicu.li/gont/v2/pkg/trace"\n\n// Create a slog handler which emits trace events\nhandler := trace.NewTraceHandler(slog.HandlerOptions{})\n\n// Add the tracing option which emits a trace event for each log message\nlogger := slog.New(handler)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Each log message emits a trace event which includes the log message,\nfilename, line number as well function name and more.\nAny fields passed to to zap structured logger are included in the ",(0,a.jsx)(n.code,{children:"Data"}),"\nfield of the ",(0,a.jsx)(n.code,{children:"Event"})," structure."]}),"\n",(0,a.jsxs)(n.h2,{id:"trace-via-gouberorgzap-logging-package",children:["Trace via ",(0,a.jsx)(n.code,{children:"go.uber.org/zap"})," logging package"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'import "go.uber.org/zap"\nimport "cunicu.li/gont/v2/pkg/trace"\n\n// Add the tracing option which emits a trace event for each log message\nlogger := zap.NewDevelopment(trace.Log())\n\n// Add the caller info which gets also included in the trace event\nlogger = logger.WithOptions(zap.AddCaller())\n\n// Give the logger some name which is added as the Source field to the trace event\nlogger = logger.Named("my-test-logger")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Each log message emits a trace event which includes the log message,\nfilename, line number as well function name and more.\nAny fields passed to to zap structured logger are included in the ",(0,a.jsx)(n.code,{children:"Data"}),"\nfield of the ",(0,a.jsx)(n.code,{children:"Event"})," structure."]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(6540);const r={},c=a.createContext(r);function s(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);